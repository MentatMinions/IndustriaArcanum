# Configuration file

add_foods {
    # Add food items, which can be eaten and restore hunger. Add them in the format:
    # 
    #       <Item name>_____<Item display name>_____<Texture location>_____<Shines (true or false)>_____<Food restored>_____<Saturation>_____<Wolves eat (true or false)>_____<Always edible (true or false)>_____<Time to eat>_____<Potion effects given (optional)>
    # 
    # Where: - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). - The item display name is what people will see in-game.
    # - The texture location is the name of the png file you place in the resource 
    # pack, in the 'assets/minecraft/items' folder without the .png.
    # - If shines is true, the food item will shine like enchanted items.
    # - The food restored is the amount of food restored in half bars.
    # - The saturation is how much saturation is given by the food (time until you
    # get hungry again).- If wolves eat is true, wolves can eat the food.
    # - If always edible is true, you can eat the food even if you're not hungry.
    # - Time to eat is how long it takes to eat the item (32 normally).
    # - Finally the potions the food gives you is a list of potion effects in the format:
    # 
    #       ..._____<Potion effect id>-<Potion duration>-<Potion level (0 is 1)>-<Probability (between 0.0 and 1.0)>_____...
    # 
    # For reference, some of the vanilla foods could be recreated with:
    # 
    # Steak:                  cooked_beef_____Steak_____beef_cooked_____false_____8_____0.8_____true_____false_____32
    # Rotten Flesh:           rotten_flesh_____Rotten Flesh_____rotten_flesh_____false_____4_____0.1_____true_____false_____32_____17-1200-0-0.8
    # Golden Apple:           golden_apple_____Golden Apple_____golden_apple_____false_____4_____1.2_____false_____true_____32_____10-100-0-1.0_____22-2400-0-1.0
    # Enchanted Golden Apple: enchanted_golden_apple_____Enchanted Golden Apple_____golden_apple_____true_____4_____1.2_____false_____true_____32_____10-600-4-1.0_____22-2400-0-1.0_____11-6000-0-1.0_____12-6000-0-1.0
    # 
    # As an example, if you wanted to add an item like a slice of pizza, you could add:
    # 
    #       pizza_slice_____Pizza Slice_____pizza_slice_____false_____6_____0.6_____false_____false_____32
    # 
    # Or if you wanted to add 'ruby' apples like the vanilla golden ones but with
    # health boost instead of absorption, you could add:
    # 
    #       ruby_apple_____§bRuby Apple_____ruby_apple_____false_____4_____1.2_____false_____true_____32_____10-150-1-1.0_____21-2400-1-1.0
    #       enchanted_ruby_apple_____§dRuby Apple_____ruby_apple_____true_____4_____1.2_____false_____true_____32_____10-600-4-1.0_____21-2400-4-1.0_____11-6000-0-1.0_____12-6000-0-1.0
    # 
    # Assuming you had a texture ruby.png in the folder mentioned above.
    # 
    S:foods <
     >
}


add_generic {
    # Add generic items, which have no special functions, but are good for
    # intermediate crafting ingredients and such, in the format:
    # 
    # <Item name>_____<Item display name>_____<Texture location>_____<Shines (true or false, optional)>
    # 
    # Where the item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!), the item display name is what
    # people will see in-game, and the texture location is the name of the png
    # file you place in the resource pack, in the 'assets/minecraft/items' folder
    # without the .png. If shines is true, the item will have the glow like enchanted
    # items, nether stars, etc. So for instance to add a ruby item, you could put
    # 
    # ruby_____Ruby_____ruby
    # 
    # Assuming you had a texture ruby.png in the folder mentioned above.
    # 
    S:generic_items <
     >
}


add_materials {
    # Use this to add materials to create weapons, tools, and armour out of.You will be able to repair the tools, ect. that have this material
    # with the given item, and this will also determine the attack damage
    # of the tools/weapons. Add entries in the form:
    #       <Item name>_____<Item metadata (-1 for any)>_____<Harvest level>_____<Base Durability>_____<Base Efficiency>_____<Base Damage>_____<Enchantability>_____<Armour Durability Factor>_____<Armour Protection List>
    # 
    # For reference, the default materials would be something like:
    # 
    #       minecraft:planks_____-1_____0_____59_____2.0_____0.0_____15_____5_____1-3-2-1
    #       minecraft:leather_____-1_____0_____59_____2.0_____0.0_____15_____5_____1-3-2-1
    #       minecraft:stone_____-1_____1_____131_____4.0_____1.0_____5_____5_____1-3-2-1
    #       minecraft:iron_ingot_____-1_____2_____250_____6.0_____2.0_____14_____15_____2-6-5-2
    #       minecraft:gold_ingot_____-1_____0_____32_____12.0_____0.0_____22_____7_____2-5-3-1
    #       minecraft:diamond_____-1_____3_____1561_____8.0_____3.0_____10_____33_____3-8-6-3
    # 
    # So you should model yours in the same way. You can use materials you add in the
    # generic section by adding lootplusplus: to the front of the item name. For instance,
    # assuming you added the ruby, you could write:
    # 
    #       lootplusplus:ruby_____-1_____3_____1200_____10.0_____3.0_____20_____32_____3-8-6-3
    # 
    # To make rubies a material much like diamond, but faster at digging, with
    # more enchantability, and less durability.
    S:additions <
     >
}


additions_armor {
    # Add boots, which will act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Texture location>_____<Material item name>_____<Armour model texure location>_____<Material item metadata (optional)>
    # 
    # Where the item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!), the item display name is what
    # people will see in-game, and the texture location is the name of the png
    # file you place in the resource pack, in the 'assets/minecraft/items' folder
    # without the .png. Some for the armour model texture name, except that is the
    # texture that will render on your character when the armor is worn. That one
    # Should be in the 'assets/minecraft/models/armor' folder. So for instance,
    # assuming that you added the ruby item in the generic section and material
    # for the item, you can add ruby boots with:
    # 
    #       ruby_boots_____Ruby Boots_____ruby_boots_____lootplusplus:ruby_____ruby_layer_1
    # 
    # Assuming you had a texture ruby_boots.png in the items folder, and a texture
    # ruby_layer_1.png in the models/armor folder.
    # 
    S:boots <
     >

    # Add a chestplate, which will act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Texture location>_____<Material item name>_____<Armour model texure location>_____<Material item metadata (optional)>
    # 
    # Where the item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!), the item display name is what
    # people will see in-game, and the texture location is the name of the png
    # file you place in the resource pack, in the 'assets/minecraft/items' folder
    # without the .png. Some for the armour model texture name, except that is the
    # texture that will render on your character when the armor is worn. That one
    # Should be in the 'assets/minecraft/models/armor' folder. So for instance,
    # assuming that you added the ruby item in the generic section and material
    # for the item, you can add a ruby chestplate with:
    # 
    #       ruby_chestplate_____Ruby Chestplate_____ruby_chestplate_____lootplusplus:ruby_____ruby_layer_1
    # 
    # Assuming you had a texture ruby_chestplate.png in the items folder, and a texture
    # ruby_layer_1.png in the models/armor folder.
    # 
    S:chestplates <
     >

    # Add a helmet, which will act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Texture location>_____<Material item name>_____<Armour model texure location>_____<Material item metadata (optional)>
    # 
    # Where the item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!), the item display name is what
    # people will see in-game, and the texture location is the name of the png
    # file you place in the resource pack, in the 'assets/minecraft/items' folder
    # without the .png. Some for the armour model texture name, except that is the
    # texture that will render on your character when the armor is worn. That one
    # Should be in the 'assets/minecraft/models/armor' folder. So for instance,
    # assuming that you added the ruby item in the generic section and material
    # for the item, you can add a ruby helmet with:
    # 
    #       ruby_helmet_____Ruby Helmet_____ruby_helmet_____lootplusplus:ruby_____ruby_layer_1
    # 
    # Assuming you had a texture ruby_helmet.png in the items folder, and a texture
    # ruby_layer_1.png in the models/armor folder.
    # 
    S:helmets <
     >

    # Add a pair of leggings, which will act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Texture location>_____<Material item name>_____<Armour model texure location>_____<Material item metadata (optional)>
    # 
    # Where the item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!), the item display name is what
    # people will see in-game, and the texture location is the name of the png
    # file you place in the resource pack, in the 'assets/minecraft/items' folder
    # without the .png. Some for the armour model texture name, except that is the
    # texture that will render on your character when the armor is worn. That one
    # Should be in the 'assets/minecraft/models/armor' folder. So for instance,
    # assuming that you added the ruby item in the generic section and material
    # for the item, you can add ruby leggings with:
    # 
    #       ruby_leggings_____Ruby leggings_____ruby_leggings_____lootplusplus:ruby_____ruby_layer_2
    # 
    # Assuming you had a texture ruby_leggings.png in the items folder, and a texture
    # ruby_layer_2.png in the models/armor folder. Note that it's layer 2 in this case,
    # not layer 1! The leggings are on a different layer.
    # 
    S:leggings <
     >
}


additions_bows {
    # Add bows, which act like vanilla bows. Add them in the format:
    # 
    #       <Item name>_____<Item display name>_____<Durability>_____<Base damage>_____<Draw time>_____<Arrows Shot>_____<Enchantability>_____<Repair item name (write none for none)>_____<Repair item meta (-1 for any)>_____<Idle Texture>_____<Draw Texture 1>_____<Draw Texture 2>_____<Draw Texture 3>
    # 
    # Where: 
    # The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!), 
    # the item display name is what people will see in-game, 
    # the durability is the durability of the bow,
    # the base damage is the amount of damage added to any arrows you shoot,
    # the draw time is how fast you can draw the bow,
    # the enchantability is how enchantable the bow is,
    # the repair item is what you can repair the bow with ('none' if not repairable),
    # the repair meta is the metadata for the repair item,
    # and finally the four texture names are the names of the four
    # files you place in the resource pack, in the 'assets/minecraft/items' folder
    # without the .png. The first one is what the bow looks like normally, and the
    # other three are what it looks like when drawn back. For reference the vanilla
    # bow would be something like:
    # 
    #       bow_____Bow_____384_____0.0_____20_____1_____1_____none_____-1_____bow_standby_____bow_pulling_0_____bow_pulling_1_____bow_pulling_2
    # 
    # If you wanted to add ruby reinforced bows, regular and double, you could put:
    # 
    #       ruby_bow_____Ruby Reinforced Bow_____1000_____2.0_____22_____1_____5_____lootplusplus:ruby_____-1_____ruby_bow_standby_____ruby_bow_pulling_0_____ruby_bow_pulling_1_____ruby_bow_pulling_2
    #       ruby_double_bow_____Double Ruby Reinforced Bow_____1500_____2.0_____25_____2_____10_____lootplusplus:ruby_bow_____-1_____ruby_double_bow_standby_____ruby_double_bow_pulling_0_____ruby_double_bow_pulling_1_____ruby_double_bow_pulling_2
    # 
    S:bows <
     >
}


additions_tools {
    # Add axes, which act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Texture location>_____<Material item name>_____<Material item metadata (optional)>
    # 
    # Where the item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!), the item display name is what
    # people will see in-game, and the texture location is the name of the png
    # file you place in the resource pack, in the 'assets/minecraft/items' folder
    # without the .png. So for instance, assuming that you added the ruby item
    # in the generic section and material for the item, you can add a ruby axe with:
    # 
    #       ruby_axe_____Ruby Axe_____ruby_axe_____lootplusplus:ruby
    # 
    # Assuming you had a texture ruby_axe.png in the folder mentioned above.
    # 
    S:axes <
     >

    # Add a hoe, which will act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Texture location>_____<Material item name>_____<Material item metadata (optional)>
    # 
    # Where the item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!), the item display name is what
    # people will see in-game, and the texture location is the name of the png
    # file you place in the resource pack, in the 'assets/minecraft/items' folder
    # without the .png. So for instance, assuming that you added the ruby item
    # in the generic section and material for the item, you can add a ruby hoe with:
    # 
    #       ruby_hoe_____Ruby Hoe_____ruby_hoe_____lootplusplus:ruby
    # 
    # Assuming you had a texture ruby_hoe.png in the folder mentioned above.
    # 
    S:hoes <
     >

    # Add pickaxes, which act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Texture location>_____<Material item name>_____<Material item metadata (optional)>
    # 
    # Where the item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!), the item display name is what
    # people will see in-game, and the texture location is the name of the png
    # file you place in the resource pack, in the 'assets/minecraft/items' folder
    # without the .png. So for instance, assuming that you added the ruby item
    # in the generic section and material for the item, you can add a ruby pickaxe with:
    # 
    #       ruby_pickaxe_____Ruby Pickaxe_____ruby_pickaxe_____lootplusplus:ruby
    # 
    # Assuming you had a texture ruby_pickaxe.png in the folder mentioned above.
    # 
    S:pickaxes <
     >

    # Add a shovel, which will act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Texture location>_____<Material item name>_____<Material item metadata (optional)>
    # 
    # Where the item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!), the item display name is what
    # people will see in-game, and the texture location is the name of the png
    # file you place in the resource pack, in the 'assets/minecraft/items' folder
    # without the .png. So for instance, assuming that you added the ruby item
    # in the generic section and material for the item, you can add a ruby shovel with:
    # 
    #       ruby_shovel_____Ruby Shovel_____ruby_shovel_____lootplusplus:ruby
    # 
    # Assuming you had a texture ruby_shovel.png in the folder mentioned above.
    # 
    S:shovels <
     >

    # Add swords, which act like the vanilla swords, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Texture location>_____<Material item name>_____<Added Damage (above innate material damage)>_____<Material item metadata (optional)>
    # 
    # Where the item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!), the item display name is what
    # people will see in-game, and the texture location is the name of the png
    # file you place in the resource pack, in the 'assets/minecraft/items' folder
    # without the .png. So for instance, assuming that you added the ruby item
    # in the generic section and material for the item, you can add a ruby sword,
    # dagger, and big sword with:
    #       ruby_dagger_____Ruby Dagger_____ruby_dagger_____lootplusplus:ruby_____2.0
    #       ruby_sword_____Ruby Sword_____ruby_sword_____lootplusplus:ruby_____4.0
    #       ruby_big_sword_____Ruby Big Sword_____ruby_big_sword_____lootplusplus:ruby_____6.0
    # 
    # Assuming you had a texture ruby_sword.png in the folder mentioned above.
    # 
    S:swords <
     >
}


